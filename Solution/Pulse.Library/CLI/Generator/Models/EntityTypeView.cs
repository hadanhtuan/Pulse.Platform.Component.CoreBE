using Database.Models.Schema;
using Pulse.Library.Persistence.Models.Schema;
using System.ComponentModel.DataAnnotations;

namespace Pulse.Library.CLI.Generator.Models;


/// Definition of an ENTITY TYPE(defined in init.json) in the AODB.
public abstract class EntityTypeView
{
    /// Internal name used as a unique identifier for the entity type.
    // This constraint is due to internal limitations in naming Postgresql tables 
    [MaxLength(56)]
    [RegularExpression(@"^[a-z_]{0,56}$")]
    public string InternalName { get; set; } = null!;

    /// Name of the entity type as displayed in a user interface.
    public string DisplayName { get; set; } = null!;
    
    /// Description of the entity type.
    public string? Description { get; set; }

    /// Status of the entity.
    public Status Status { get; set; }
    
    /// A list of indexes, which are used for querying the EntityType
    public IEnumerable<IndexView> Indexes { get; set; } = new List<IndexView>();
    
    /// A RootEntityType can have a number of Unique Constraints,
    /// which each determine that certain attributes (or expressions on attributes) must be unique
    public IEnumerable<UniqueConstraintView> UniqueConstraints { get; set; } = new List<UniqueConstraintView>();
    
    /// Definitions of the value attribute types in this entity type.
    public virtual IEnumerable<AttributeTypeView> AttributeTypes { get; set; } = new List<AttributeTypeView>();

    
    /// Definitions of the complex attribute types in this entity type.
    public virtual IEnumerable<ComplexAttributeTypeView> ComplexAttributeTypes { get; set; } = new List<ComplexAttributeTypeView>();
    
    /// Definitions of the actions in this entity type.
    public virtual IEnumerable<ActionView> Actions { get; set; } = new List<ActionView>();

    // Autogenerated IEqualityComparer - to be added if needed.
}