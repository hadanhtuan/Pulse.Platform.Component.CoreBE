using Pulse.Library.Common.Extensions;
using Pulse.Library.Core.Schema;
using System.Text;

namespace Pulse.Library.CLI.Generator.Services.Aodb;

public class AodbCodeGenerator
{
    private static string autogeneratedRemarks => @"<remarks>
/// This class is autogenerated, do not make changes here!
/// </remarks>";

    private static string SummaryAndAutogeneratedRemarks(string? summary) => @$"<summary>
/// {summary}
/// </summary>
/// {autogeneratedRemarks}";

    private static string GetUsingStatements(EntityType entity,
            string[] complexAttributesUsingStatement = null,
            string[] otherUsingStatements = null)
    {
        string usingStmt = string.Empty;
        if (HasSystemAttributes(entity))
        {
            usingStmt += @"using System;";
        }

        if (otherUsingStatements is not null)
        {
            foreach (var statement in otherUsingStatements)
            {
                usingStmt += $"{Environment.NewLine}using {statement};";
            }
        }


        if (entity.ComplexAttributeTypes.Any() && complexAttributesUsingStatement is not null)
        {
            foreach (var statement in complexAttributesUsingStatement)
            {
                usingStmt += $"{Environment.NewLine}using {statement};";
            }
        }

        if (!string.IsNullOrWhiteSpace(usingStmt))
        {
            usingStmt += @"
";
        }

        return usingStmt;
    }

    public Dictionary<string, string> CreateEntities(SchemaVersion schema)
    {
        Dictionary<string, string> keyValuePairs = new Dictionary<string, string>();
        foreach (var entity in schema.EntityTypes)
        {
            var attributes = GenerateAttributes(entity);

            var entityName = entity.InternalName.CamelCaseAndRemoveUnderscore();
            string entityImplementationTemplate = @$"
namespace AODB.Generated.Model.Entities;

/// {autogeneratedRemarks}
public class {entityName} : Entity
{{
{attributes}
}}
";

            var usingStatement = GetUsingStatements(entity,
                complexAttributesUsingStatement: [
                    "AODB.Generated.Model.ComplexDataTypes",
                    "System.ComponentModel.DataAnnotations.Schema"
                ],
                otherUsingStatements: ["Pulse.Library.Core.Schema"]);

            keyValuePairs.Add(entityName, usingStatement + entityImplementationTemplate);
        }
        return keyValuePairs;
    }

    // Generate both simple and complex attributes
    public string GenerateAttributes(EntityType entity)
    {
        var attributeStringBuilder = new StringBuilder();
        foreach (var attribute in entity.GetAllAttributeTypes())
        {
            var attributeType = attribute.GetAttributeDataType();

            // Check if attribute is required or optional
            var attributeTypeWithModifier = attribute.IsRequired ? $"required {attributeType}" : $"{attributeType}?";

            attributeStringBuilder.AppendLine(InsertDescription(attribute.Description));
            if (attribute is ComplexAttributeType)
            {
                attributeStringBuilder.AppendLine("    [Column(TypeName = \"jsonb\")]");
            }
            attributeStringBuilder.AppendLine(
                $"    public {attributeTypeWithModifier} {attribute.InternalName.CamelCaseAndRemoveUnderscore()} " +
                $"{{ get; set; }}");
        }
        return attributeStringBuilder.ToString();
    }

    public Dictionary<string, string> CreateComplexDataTypes(SchemaVersion schema)
    {
        var keyValuePairs = new Dictionary<string, string>();

        GenerateBaseComplexClasses(keyValuePairs);

        foreach (var entity in schema.ComplexDataTypes)
        {
            GenerateComplexDataType(entity, keyValuePairs);
        }

        return keyValuePairs;
    }

    private void GenerateComplexDataType(EntityType entity, IDictionary<string, string> keyValuePairs)
    {
        var entityName = entity.InternalName.CamelCaseAndRemoveUnderscore();

        var attributes = GenerateAttributes(entity);
        var valueIsReadOnlyImpl = GenerateValueIsEmptyMethod(entity);

        string entityTemplate = @$"
namespace AODB.Generated.Model.ComplexDataTypes;

/// {SummaryAndAutogeneratedRemarks(entity.Description)}
public class {entityName}
{{
{attributes}
{valueIsReadOnlyImpl}
}}";

        var usingStatement = GetUsingStatements(entity);

        keyValuePairs.Add(entityName, usingStatement + entityTemplate);
    }

    // Generate ComplexAttributeCollection.cs
    private static void GenerateBaseComplexClasses(IDictionary<string, string> keyValuePairs)
    {
        string className = "ComplexAttributeCollection";
        string usingStatement = @$"using System.Collections.ObjectModel;
";
        string classTemplate = @$"
namespace AODB.Generated.Model.ComplexDataTypes;

/// <summary>
/// Use for complex attribute with collection
/// </summary>
public class ComplexAttributeCollection<T>: Collection<T>
{{
}}";

        keyValuePairs.Add(className, usingStatement + classTemplate);
    }

    private static string GenerateValueIsEmptyMethod(EntityType entity)
    {
        var valueAttributeChecks = entity.AttributeTypes.Select(
            attribute => $"{attribute.InternalName.CamelCaseAndRemoveUnderscore()} == null");
        var complexAttributeChecks = entity.ComplexAttributeTypes.Select(
            attribute => $"{attribute.InternalName.CamelCaseAndRemoveUnderscore()}.ValueIsEmpty()");

        var allChecks = valueAttributeChecks.ToList();
        allChecks.AddRange(complexAttributeChecks);

        var booleanCheck = string.Join(" && ", allChecks);
        if (string.IsNullOrWhiteSpace(booleanCheck))
        {
            booleanCheck = "true";
        }

        return @$"    public bool ValueIsEmpty()
    {{
        return {booleanCheck};
    }}";
    }

    public Dictionary<string, string> CreateAodbContextInterface(SchemaVersion schema)
    {
        Dictionary<string, string> keyValuePairs = new Dictionary<string, string>();
        var attributes = GenerateQueryableInterface(schema);
        string iAodbContextTemplate = @$"
using System.Linq;
using AODB.Generated.Model.Entities;

namespace AODB.Generated.Context;

/// {autogeneratedRemarks}
public partial interface IAodbContext
{{
{attributes}
}}";
        keyValuePairs.Add("IAodbContext", iAodbContextTemplate);
        return keyValuePairs;
    }

    public string GenerateQueryableInterface(SchemaVersion schema)
    {
        var attributeStringBuilder = new StringBuilder();
        foreach (var entity in schema.EntityTypes)
        {
            string entityName = entity.InternalName.CamelCaseAndRemoveUnderscore();
            // attributeStringBuilder.AppendLine(InsertDescription(entity.Description));
            attributeStringBuilder.AppendLine(
                $"    public IQueryable<{entityName}> {entityName} {{ get; }}");
        }
        return attributeStringBuilder.ToString();
    }

    private static bool HasSystemAttributes(EntityType entityType)
    {
        return entityType.AttributeTypes.Any(a => a.DataType == DataType.DateTime || a.DataType == DataType.Guid);
    }

    private static string InsertDescription(string? description)
    {
        return $"{Environment.NewLine}    /// <summary>{Environment.NewLine}    " +
               $"/// {description}{Environment.NewLine}    /// </summary>";
    }

    private static string CreateObsoleteAnnotation(AttributeType attribute)
    {
        return attribute.Status != Core.Schema.Status.Active ? $"        [System.Obsolete(\"Deprecated Attribute\")]{Environment.NewLine}" : "";
    }

    private static string CreateComplexAttributeJsonConverterAnnotation(bool useComplexJsonConverterAnnotation, string attributeType, string internalName)
    {
        return useComplexJsonConverterAnnotation ? $"        [System.Text.Json.Serialization.JsonConverter(typeof(SystemTextJsonInterfaceConverter<{attributeType}, {internalName}>))]{Environment.NewLine}" : "";
    }
}
